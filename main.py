import telebot
import os
import json
import subprocess

from wrapper.log import log_command
from database.database import create_users_table, add_user, get_all_users
from database.crypto import conn, cursor, encrypt, decrypt
from config.config import *
from keyboard.key import *
from parse.parsing import get_ip_info
from ssh.sshconnect import ssh_connect, ssh_close, ssh_cmd, get_user_state, set_user_state

with open(path_token, 'r') as file:
    config = json.load(file)

os.chdir(path_file) 
bot = telebot.TeleBot(config['token'])
ssh_client = None

@bot.message_handler(commands=['addpassword'])
def add_password(message):
    try:
        parts = message.text.split(maxsplit=4)
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        _, url, login, password = parts
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ URL —Å http:// –∏–ª–∏ https://
        if not (url.startswith('http://') or url.startswith('https://')):
            raise ValueError("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        chat_id = message.chat.id
        url_encrypted = encrypt(url)
        login_encrypted = encrypt(login)
        password_encrypted = encrypt(password)
        cursor.execute("INSERT INTO passwords (chat_id, url, login, password_encrypted) VALUES (?, ?, ?, ?)", 
                       (chat_id, url_encrypted, login_encrypted, password_encrypted))
        conn.commit()
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π: /listpasswords")
    except ValueError as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞. {str(e)} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /addpassword [—Å—Å—ã–ª–∫–∞] [–ª–æ–≥–∏–Ω/–ø–æ—á—Ç–∞/—Ç–µ–ª–µ—Ñ–æ–Ω] [–ø–∞—Ä–æ–ª—å]")


@bot.message_handler(commands=['listpassword'])
def list_passwords(message):
    chat_id = message.chat.id
    cursor.execute("SELECT url, login, password_encrypted FROM passwords WHERE chat_id=?", (chat_id,))
    passwords = cursor.fetchall()
    if passwords:
        response = "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + "\n".join([f"–°—Å—ã–ª–∫–∞: {decrypt(url)}, –õ–æ–≥–∏–Ω: {decrypt(login)}, –ü–∞—Ä–æ–ª—å: {decrypt(password_encrypted)}" for url, login, password_encrypted in passwords])
    else:
        response = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–µ—Ç.\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addpassword"
    bot.reply_to(message, response)

@bot.message_handler(commands=['delpassword'])
def delete_password(message):
    try:
        _, url_to_delete = message.text.split(maxsplit=1)
        chat_id = message.chat.id
        cursor.execute("SELECT rowid, url FROM passwords WHERE chat_id=?", (chat_id,))
        rows = cursor.fetchall()

        for row in rows:
            rowid, encrypted_url = row
            if decrypt(encrypted_url) == url_to_delete:
                cursor.execute("DELETE FROM passwords WHERE rowid=?", (rowid,))
                conn.commit()
                bot.reply_to(message, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª—å: /listpassword")
                return
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delpassword [—Å—Å—ã–ª–∫–∞]")

@bot.message_handler(commands=['start']) 
@log_command
def start_message(message):
    add_user(message.from_user.id)
    markup_inline.add(btn_group, btn_ping, btn_addpswd)

    bot.send_message(
        message.chat.id,  
        "üìå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –ò–ü–¢–ò–ü(–ú–ò–†–≠–ê)! –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏ —É—á–µ–±—É. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=markup_inline
    )

@bot.message_handler(commands=['group'])
def send_docx_message(message):
    user_id = message.from_user.id
    doc_path = "resources/group_list.docx"
    with open(doc_path, 'rb') as doc:
        bot.send_document(message.chat.id, doc, caption="üòÅ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã:")
    pass
'''
# –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã")
def handle_group_button(message):
    sent_message = bot.send_message(message.chat.id, "–í—ã–∑—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /group...")
    time.sleep(1)
    bot.delete_message(message.chat.id, sent_message.message_id)
    send_docx_message(message)

@bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–∏–Ω–≥")
def handle_ping_button(message):
    sent_message = bot.send_message(message.chat.id, "–í—ã–∑—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É /ping...")
    time.sleep(1)
    bot.delete_message(message.chat.id, sent_message.message_id)
    ping(message)
#
'''
@bot.message_handler(commands=['send'])
def send_to_all(message):
    if message.from_user.id == admin:
        text_to_send = message.text.replace('/send ', '', 1)
        user_ids = get_all_users()
        for user_id in user_ids:
            try:
                bot.send_message(user_id, f"‚úèÔ∏è [–û–±—ä—è–≤–ª–µ–Ω–∏–µ] {text_to_send}")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        bot.reply_to(message, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º")

@bot.message_handler(commands=['ping'])
def ping(message):
    bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ping:")
    bot.register_next_step_handler(message, process_ping)

def process_ping(message):
    ip_address = message.text
    try:
        output = subprocess.check_output(['ping', '-c', '3', ip_address])
        ip_info = get_ip_info(ip_address)
        response_text = f"‚ö°Ô∏è –ü–∏–Ω–≥ –¥–æ {ip_address}:\n\n{output.decode('utf-8')}\n\n"
        response_text += f"üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:\n–°—Ç—Ä–∞–Ω–∞: {ip_info.get('country', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ì–æ—Ä–æ–¥: {ip_info.get('city', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        bot.send_message(message.chat.id, response_text)
    except Exception as e:
        bot.send_message(message.chat.id, f"üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å")

@bot.message_handler(commands=['ssh-connect'])
def ssh_connect_start(message):
    msg = bot.reply_to(message, "üí£ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ SSH –≤ —Ñ–æ—Ä–º–∞—Ç–µ: host port username password")
    bot.register_next_step_handler(msg, process_ssh_connect)
    set_user_state(message.from_user.id, 'ssh_connected')

def process_ssh_connect(message):
    try:
        details = message.text.split()
        if len(details) != 4:
            raise ValueError("Invalid format")
        success, response = ssh_connect(*details)
        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.reply_to(message, '‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. Error: {}'.format(str(e)))

@bot.message_handler(commands=['ssh-close'])
def handle_ssh_close(message):
    response = ssh_close(message.from_user.id)
    bot.reply_to(message, response)

@bot.message_handler(commands=['ssh-cmd'])
def handle_ssh_cmd_start(message):
    if get_user_state(message.from_user.id) != 'ssh_connected':
        bot.reply_to(message, "üìé –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ssh-connect –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞.")
        return
    msg = bot.reply_to(message, "> –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_ssh_cmd)

def process_ssh_cmd(message):
    command = message.text
    response = ssh_cmd(command)
    bot.send_message(message.chat.id, response)

def process_ssh_connect(message):
    try:
        details = message.text.split()
        if len(details) != 4:
            raise ValueError("Invalid format")
        host, port, username, password = details
        if port != '22':
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç 22. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        success, response = ssh_connect(host, port, username, password)
        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.reply_to(message, '‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. Error: {}'.format(str(e)))

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'addpassword':
        bot.send_message(callback.message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /addpassword [—Å—Å—ã–ª–∫–∞] [–ª–æ–≥–∏–Ω/–ø–æ—á—Ç–∞/—Ç–µ–ª–µ—Ñ–æ–Ω] [–ø–∞—Ä–æ–ª—å]')
    if callback.data == 'group':
        send_docx_message(callback.message)
    if callback.data == 'ping':
        ping(callback.message)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
create_users_table()
bot.polling(none_stop=True)